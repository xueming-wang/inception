#全局块#：Nginx服务器全局。

# 指定可以运行nginx服务的用户和用户组，只能在全局块配置
user [user] [group]

# 指定工作线程数，可以制定具体的进程数，也可使用自动模式，这个指令只能在全局块配置
worker_processes number | auto；

#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log /usr/local/nginx/logs/error.log info;

#events块# 主要影响Nginx服务器与用户的网络连接
#是否开启对多worker process下的网络连接进行序列化 是否允许同时接收多个网络连接
events {
    # 开启的时候，将会对多个Nginx进程接收连接进行序列化，防止多个进程对连接的争抢
    # 默认是开启状态，只能在events块中进行配置
    accept_mutex on;

    #一个工作进程可以同时接受所有的新连接
    multi_accept off; 

    #设置允许每一个worker process同时开启的最大连接数 ，连接进入logback，logback满后连接被拒绝
    worker_connections  1024;

    #keepalive超时时间。
    keepalive_timeout 60;
}

#http块  代理、缓存和日志定义等绝大多数的功能和第三方模块的配置 !!!!!Nginx服务器作为Web服务器
http {

    #include指令，用于包含其他的配置文件，可以放在配置文件的任何地方 下面的指令将mime.types包含进来
    include  mime.types;

    # 配置默认类型，如果不加此指令，默认值为text/plain。
    default_type  application/octet-stream;

     #开启高效文件传输模式
    sendfile        on;

    # access_log配置 记录Nginx服务器提供服务过程应答前端请求的日志
    access_log   /usr/local/nginx/access.log;

    # log_format指令，用于定义日志格式
    log_format  main
    # 定义了上面的日志格式后，可以以下面的形式使用日志
    access_log  logs/access.log  main;

    # 设置sendfile最大数据量 如果设置为0，则无限制 默认值为0。
    sendfile_max_chunk 0;

    #配置连接超时时间 timeout，服务器端对连接的保持时间。默认值为75s;
    # 下面配置的含义是，在服务器端保持连接的时间设置为120 s，发给用户端的应答报文头部中Keep-Alive域的超时时间设置为100 s。
    keepalive_timeout 120s 100s

    # 配置单连接请求数上限 限制用户通过某一连接向Nginx服务器发送请求的次数。默认是100
    keepalive_requests number;

    #server:每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机
    # !!!!!在使用Nginx服务器提供Web服务时 虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。
    server {

        #全局块：server块也可以包含自己的全局块，同时可以包含多个location块。
        #listen： 可以通过HTTP地址（即常说的“网址”）加“: 80”来访问网站，因为浏览网页服务默认的端口号都是80，因此只需输入网址即可，不用输入“: 80”了。
        listen 80  #监听来自所有IP，请求80端口的请求 80端口是为HTTP 主要用于WWW即万维网传输信息的协议。
        listen 127.0.0.1:8000;  #只监听来自127.0.0.1这个IP，请求8000端口的请求 （不指定端口，默认80）！！！8080端口是被用于WWW代理服务的，可以实现网页浏览，经常在访问某个网站或使用代理服务器的时候
        listen localhost:8000;  #效果一致 指本地机，一般用来测试使用 向自身发送通信的一个特殊地址

        #root指令这个指令用于设置请求寻找资源的跟目录
        root path
           
        #server_name：用于配置虚拟主机的名称 多个虚拟主机可以同时监听同一个端口,但是server_name需要设置成不一样；可以由多个名称并列，之间用空格隔开 第一个名称作为此虚拟主机的主要名称。
        server_name localhost www.myserver.com

        index  index.html index.htm;

        #location块 可以包含多个location块。
        #location块的主要作用是 基于Nginx服务器接收到的请求字符串 对除虚拟主机名称之外的字符串进行匹配  地址定向、数据缓存和应答控制

        # reverse proxy to phpmyadmin #对 path 启用反向代理
        location path {   #uri变量是待匹配的请求字符串 如/myserver.php等

            proxy_pass http://127.0.0.1:88;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
             
            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             
            #以下是一些反向代理的配置，可选。
            proxy_set_header Host $host;

        }
        
    }

}


