# Defining and running multi-container Docker applications
#指定本 yml 依从的 compose 哪个版本制定的。
version: '3'  #Compose File 的版本

#services 區塊就是我們想要建立、啟動的服務
services:  
  # Nginx Service
  nginx:
    build: ./nginx
    image: nginx
    container_name: nginx_xuwang
    ports:
      - 443:443
    #./src 就是在 docker-compose.yml 所在資料夾裡的 src/ 資料夾，它會同時被掛載到兩個 docker 容器的 /var/www/php 這個資料夾裡；
    #而 ./.docker/nginx/conf.d 則會被掛載到 nginx 容器的 /etc/nginx/conf.d 資料夾。 在每個載掛設定後面加上的 :ro 是 read only 的意思。
    volumes:
      - wordpress:/var/www/wordpress
    #设置依赖关系。 depends_on  就會在 Nginx 容器啟動之前先啟動 php-fpm 容器。
    depends_on: 
      - wordpress
    restart: always

  # wordpress  
  wordpress:
    build: ./wordpress
    image: wordpress
    container_name: wordpress_xuwang
    ports:
      -3306:3306
    volumes:
      - wordpress:/var/www/wordpress
    depends_on:
      - mariadb
    restart: always
    
  
  # mariadb
  mariadb:
    build: ./mariadb
    image: mariadb
    container_name: mariadb
    ports:
      -9000:9000
    volumes:
      - mariadb:/var/lib/mysql
    restart: always

  # networks
  networks:
  # # MySQL Service
  # mysql:
  #   image: mysql:8
  #   environment:
  #     MYSQL_ROOT_PASSWORD: {rootpassword}
  #     MYSQL_DATABASE: {db_name}
  #     MYSQL_USER: {user}
  #     MYSQL_PASSWORD: {userpassword}
  #   volumes:
  #     - ./.docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
  #     - mysqldata:/var/lib/mysql
    
  

#该 Compose 文件定义了两个服务：web 和 redis。
#web：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。
#redis：该 redis 服务使用 Docker Hub 的公共 Redis 映像。
#使用 Compose 命令构建和运行您的应用
  #命令来启动应用程序：docker-compose up 后台执行该服务可以加上 -d 参数：
